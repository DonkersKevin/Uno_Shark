package be.switchfully.uno_shark.controllers;import be.switchfully.uno_shark.domain.parking.Division;import be.switchfully.uno_shark.domain.parking.ParkingCategory;import be.switchfully.uno_shark.domain.parking.Price;import be.switchfully.uno_shark.domain.parking.divisionDto.ShowDivisionDto;import be.switchfully.uno_shark.domain.parking.divisionDto.SingleDivisionDto;import be.switchfully.uno_shark.domain.parking.parkingLotDto.ParkingLotDto;import be.switchfully.uno_shark.domain.parking.parkingLotDto.ParkingLotSimpleDto;import be.switchfully.uno_shark.domain.person.Person;import be.switchfully.uno_shark.domain.person.address.Address;import be.switchfully.uno_shark.domain.person.address.PostalCode;import be.switchfully.uno_shark.domain.person.phonenumber.CountryCode;import be.switchfully.uno_shark.domain.person.phonenumber.LandLinePhone;import be.switchfully.uno_shark.domain.person.phonenumber.MobilePhone;import be.switchfully.uno_shark.repositories.ParkingLotRepository;import be.switchfully.uno_shark.services.ParkingLotService;import io.restassured.RestAssured;import io.restassured.http.ContentType;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.web.server.LocalServerPort;import org.springframework.http.HttpStatus;import java.util.ArrayList;import java.util.Arrays;import java.util.Currency;import java.util.List;import static org.assertj.core.api.Assertions.assertThat;import static org.hamcrest.core.IsEqual.equalTo;import static org.junit.jupiter.api.Assertions.assertEquals;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)@AutoConfigureTestDatabaseclass ParkingLotControllerIntegrationTest {    @Autowired    ParkingLotRepository parkingLotRepository;    @Autowired    ParkingLotService parkingLotService;    @LocalServerPort    private int port;    @Test    void createParkinglot_HappyPath() {//todo fix Json to represent CreateDivisionDto        //ARRANGE        String requestBody = """                    {                    "name": "Goeminne",                    "parkingCategory": "UNDERGROUND",                    "division": {                        "parentName": "No Parent Division",                        "subdivisions": [],                        "name": "UGC",                        "originalName": "KBC",                        "director": "Freddy"                    },                    "capacity": 400,                    "address": {                        "streetName": "Langestraat",                        "houseNumber": "22",                        "postalCode": {                            "postalCode": "3000",                            "city": "Leuven"                        },                        "country": "Belgium"                    },                    "pricePerHour": {                        "amount": 8.0,                        "currency": "EUR"                    },                    "person": {                        "firstName": "Freddy",                        "lastName": "Broeckx",                        "address": {                            "streetName": "Nieuwestraat",                            "houseNumber": "44",                            "postalCode": {                                "postalCode": "1000",                                "city": "Brussel"                            },                            "country": "Belgium"                        },                        "landLinePhone": {                            "landlineCountryCode": "BELGIUM",                            "landlineBody": "070001122"                        },                        "mobilePhone": {                            "mobilePhoneBody": "0473876578",                            "mobilePhoneCountryCode": "BELGIUM"                        },                        "emailAddress": "testing3@email.com"                    }                }""";/*        ParkingLotDto expected = new ParkingLotDto(1L, "Goeminne", ParkingCategory.UNDERGROUND,                new SingleDivisionDto(1, "No Parent Division", "UGC", "KBC", "Freddy", List.of("sub1", "sub2", "sub3")), 400,                new Person("Freddy", "Broeckx",                        new Address("Nieuwestraat", "44", new PostalCode("1000", "Brussel"), "Belgium"),                        new LandLinePhone("070001122", CountryCode.BELGIUM), new MobilePhone("0468123456", CountryCode.BELGIUM), "testing3@email.com"),                new Address("Langestraat", "22", new PostalCode("3000", "Leuven"), "Belgium"),                new Price(8.0, Currency.getInstance("EUR"))); */        //ACT        ParkingLotDto result =                RestAssured                        .given()                        .contentType(ContentType.JSON)                        .baseUri("http://localhost")                        .port(port)                        .body(requestBody)                        .when()                        .accept(ContentType.JSON)                        .post("/parkinglots")                        .then()                        .assertThat()                        .statusCode(HttpStatus.CREATED.value())                        .extract()                        .as(ParkingLotDto.class);        //ASSESS        assertThat(result).isNotNull();    }    @Test    void getAllParkingLots_HappyPath() {        ParkingLotDto[] result = RestAssured                .given()                .contentType(ContentType.JSON)                .baseUri("http://localhost")                .port(port)                .when()                .accept(ContentType.JSON)                .get("/parkinglots")                .then()                .assertThat()                .statusCode(HttpStatus.OK.value())                .extract()                .as(ParkingLotDto[].class);        assertThat(result.length).isEqualTo(parkingLotRepository.count());    }    @Test    void getParkingLotById_HappyPath(){        ParkingLotDto result = RestAssured                .given()                .contentType(ContentType.JSON)                .baseUri("http://localhost")                .port(port)                .when()                .accept(ContentType.JSON)                .get("/parkinglots/1")                .then()                .assertThat()                .statusCode(HttpStatus.OK.value())                .extract()                .as(ParkingLotDto.class);        assertThat(result.getName()).isEqualTo("Goeminne");    }    @Test    void WhenParkingLotNotFound_ThrowNoSuchElement(){        RestAssured                .given()                .baseUri("http://localhost")                .port(port)                .when()                .accept(ContentType.JSON)                .get("/parkinglots/999")                .then()                .assertThat()                .statusCode(HttpStatus.NOT_FOUND.value())                .body("message", equalTo("No parkinglot with id: 999"));    }}