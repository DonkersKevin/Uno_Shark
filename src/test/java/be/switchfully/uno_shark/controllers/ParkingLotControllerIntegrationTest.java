package be.switchfully.uno_shark.controllers;import be.switchfully.uno_shark.domain.parking.parkingLotDto.ParkingLotDto;import be.switchfully.uno_shark.domain.parking.parkingLotDto.ParkingLotSimpleDto;import be.switchfully.uno_shark.repositories.ParkingLotRepository;import be.switchfully.uno_shark.services.ParkingLotService;import io.restassured.RestAssured;import io.restassured.http.ContentType;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.web.server.LocalServerPort;import org.springframework.http.HttpStatus;import static org.assertj.core.api.Assertions.assertThat;import static org.hamcrest.core.IsEqual.equalTo;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)@AutoConfigureTestDatabaseclass ParkingLotControllerIntegrationTest {    @Autowired    ParkingLotRepository parkingLotRepository;    @Autowired    ParkingLotService parkingLotService;    @LocalServerPort    private int port;    @Test    void createParkinglot_HappyPath() {        //ARRANGE        String requestBody = """                {                    "name": "SharkyParking",                    "parkingCategory": "UNDERGROUND",                    "division": {                        "parentName": "No Parent Division",                        "name": "Infrabel",                        "originalName": "BelFraIn",                        "director": "Suzanne"                    },                    "capacity": 70,                    "address": {                        "streetName": "Bruinestraat",                        "houseNumber": "220",                        "postalCode": {                            "postalCode": "2050",                            "city": "Antwerpen"                        },                        "country": "Belgium"                    },                    "pricePerHour": {                        "amount": 3.5,                        "currency": "EUR"                    },                    "person": {                        "firstName": "Ralf",                        "lastName": "HetKalf",                        "address": {                            "streetName": "Blauwelaan",                            "houseNumber": "909",                            "postalCode": {                                "postalCode": "2060",                                "city": "Antwerpen"                            },                            "country": "Belgium"                        },                        "landLinePhone": {                            "landlineCountryCode": "BELGIUM",                            "landlineBody": "054789123"                        },                        "mobilePhone": {                            "mobilePhoneBody": "0473211478",                            "mobilePhoneCountryCode": "BELGIUM"                        },                        "emailAddress": "KalfkeWillie@switchfully.com"                    }                }""";        //ACT        ParkingLotDto result =                RestAssured                        .given()                        .contentType(ContentType.JSON)                        .baseUri("http://localhost")                        .port(port)                        .body(requestBody)                        .when()                        .accept(ContentType.JSON)                        .post("/parkinglots")                        .then()                        .assertThat()                        .statusCode(HttpStatus.CREATED.value())                        .extract()                        .as(ParkingLotDto.class);        //ASSESS        assertThat(result).isNotNull();    }    @Test    void getAllParkingLots_HappyPath() {        ParkingLotSimpleDto[] result = RestAssured                .given()                .contentType(ContentType.JSON)                .baseUri("http://localhost")                .port(port)                .when()                .accept(ContentType.JSON)                .get("/parkinglots")                .then()                .assertThat()                .statusCode(HttpStatus.OK.value())                .extract()                .as(ParkingLotSimpleDto[].class);        assertThat(result.length).isEqualTo(parkingLotRepository.count());    }    @Test    void getParkingLotById_HappyPath() {        ParkingLotDto result = RestAssured                .given()                .contentType(ContentType.JSON)                .baseUri("http://localhost")                .port(port)                .when()                .accept(ContentType.JSON)                .get("/parkinglots/1")                .then()                .assertThat()                .statusCode(HttpStatus.OK.value())                .extract()                .as(ParkingLotDto.class);        assertThat(result.getName()).isEqualTo("Goeminne");    }    @Test    void WhenParkingLotNotFound_ThrowNoSuchElement() {        RestAssured                .given()                .baseUri("http://localhost")                .port(port)                .when()                .accept(ContentType.JSON)                .get("/parkinglots/999")                .then()                .assertThat()                .statusCode(HttpStatus.NOT_FOUND.value())                .body("message", equalTo("No parkinglot with id: 999"));    }}